//
//  ListViewController.swift
//  Swiftmazing
//
//  Created by Hélio Mesquita on 14/12/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Combine
import UIKit
import UIComponents

class ListViewController: ListCollectionViewController<ListCellViewModel> {

  private let viewModel: ListViewModel
  private var cancellables = Set<AnyCancellable>()

  init(listTitle: String,
       listFilter: RepositoriesFilter,
       listRepositories: [RepositoryModel]
  ) {
    self.viewModel = ListViewModel(
      listTitle: listTitle,
      listFilter: listFilter,
      listRepositories: listRepositories)
    super.init()
  }
  
  required init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  override func viewDidLoad() {
    super.viewDidLoad()

    viewModel.navigateToNextScreen
      .sink { action in
        switch action {
        case .detail(let repository):
          let repositoryDetailViewController = RepositoryDetailViewController(repository: repository)
          self.navigationController?.pushViewController(repositoryDetailViewController, animated: true)
        }
      }.store(in: &cancellables)

    viewModel.$state
      .receive(on: RunLoop.main)
      .sink { states in
      switch states {
      case .loading:
        break
      case .loaded(let values):
        let model = values.repositories
        let title = values.title

        self.title = title

//        let items = dataSource.snapshot().itemIdentifiers + viewModels
        var snapshot = NSDiffableDataSourceSnapshot<ListSection, ListCellViewModel>()
        snapshot.appendSections([.repo])
        snapshot.appendItems(model, toSection: .repo)
        self.dataSource.apply(snapshot, animatingDifferences: false)
        self.collectionView.refreshControl?.endRefreshing()

      case .error(let message):
        self.showTryAgain(title: Text.anErrorHappened.value, message: message)
      }
    }.store(in: &cancellables)


    viewModel.loadScreen()
  }

  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    configure()
  }

  func configure() {
    collectionView.delegate = self
    collectionView.prefetchDataSource = self
    collectionView.refreshControl?.addTarget(self, action: #selector(load), for: .valueChanged)
  }

  @objc func load() {
    collectionView.refreshControl?.beginRefreshing()
    viewModel.reloadRepositories()
  }

}

extension ListViewController: UICollectionViewDelegate {

  func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    guard let element = dataSource.itemIdentifier(for: indexPath)?.repository else { return }
    viewModel.repositorySelected(element)
  }

}

extension ListViewController: UICollectionViewDataSourcePrefetching {

  func collectionView(_ collectionView: UICollectionView, prefetchItemsAt indexPaths: [IndexPath]) {
    for indexPath in indexPaths {
      viewModel.prefetchNextPage(index: indexPath.row)
    }
  }

}

extension ListViewController: AlertDisplayProtocol {

  func reload() {
    load()
  }

}
