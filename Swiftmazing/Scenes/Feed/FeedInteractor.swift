//
//  FeedInteractor.swift
//  Swiftmazing
//
//  Created by Hélio Mesquita on 14/12/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import Infrastructure
import UIKit

protocol FeedBusinessLogic {
  func loadScreen()
  func repositorySelected(_ repository: RepositoryModel?)
  func topRepoListSelected(_ repositories: [RepositoryModel], title: String)
  func lastUpdatedListSelected(_ repositories: [RepositoryModel], title: String)
}

protocol FeedDataStore {
  var selectedRepository: RepositoryModel? { get set }
  var listTitle: String { get set }
  var listFilter: Filter { get set }
  var listRepositories: [RepositoryModel] { get set }
}

class FeedInteractor: FeedBusinessLogic, FeedDataStore {

  var presenter: FeedPresentationLogic?
  let worker: RepositoriesWorker

  // MARK: DATASTORE
  var listTitle: String = ""
  var listFilter: Filter = .none
  var listRepositories: [RepositoryModel] = []
  var selectedRepository: RepositoryModel?

  init(worker: RepositoriesWorker = RepositoriesWorker()) {
    self.worker = worker
  }

  func loadScreen() {
    Task { @MainActor in
      do {
        async let topRepo = worker.getRepositories(with: .stars)
        async let lastUpdated = worker.getRepositories(with: .updated)
        let (topRepoData, lastUpdatedData) = try await (topRepo, lastUpdated)
        handleSuccess(topRepoData, lastUpdatedData)
      } catch {
        handleError(error)
      }
    }
  }

  private func handleSuccess(
    _ topRepoResponse: RepositoriesModel, _ lastUpdatedResponse: RepositoriesModel
  ) {
    presenter?.mapResponse(topRepoResponse, lastUpdatedResponse)
  }

  private func handleError(_ error: Error) {
    presenter?.presentTryAgain(message: (error as? RequestError)?.localizedDescription ?? "")
  }

  func repositorySelected(_ repository: RepositoryModel?) {
    selectedRepository = repository
    presenter?.presentDetail()
  }

  func topRepoListSelected(_ repositories: [RepositoryModel], title: String) {
    listRepositories = repositories
    listFilter = .stars
    listTitle = title
    presenter?.presentList()
  }

  func lastUpdatedListSelected(_ repositories: [RepositoryModel], title: String) {
    listRepositories = repositories
    listFilter = .updated
    listTitle = title
    presenter?.presentList()
  }

}
