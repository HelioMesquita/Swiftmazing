//
//  ListViewController.swift
//  Swiftmazing
//
//  Created by Hélio Mesquita on 14/12/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Visual

protocol ListDisplayLogic: class {
    func show(_ viewModels: [List.ListCellViewModel])
    func showTitle(_ title: String)
}

class ListViewController: ListCollectionViewController<List.ListCellViewModel> {

    var interactor: ListBusinessLogic?
    var router: (ListRoutingLogic & ListDataPassing)?

    override func setup() {
        let viewController = self
        let interactor = ListInteractor()
        let presenter = ListPresenter()
        let router = ListRouter()
        viewController.interactor = interactor
        viewController.router = router
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        interactor.presenter = presenter
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        configure()
        load()
    }

    func configure() {
        collectionView.prefetchDataSource = self
        collectionView.refreshControl?.addTarget(self, action: #selector(load), for: .valueChanged)
    }

    @objc func load() {
        collectionView.refreshControl?.beginRefreshing()
        interactor?.loadScreen()
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        interactor?.resetProvider()
    }

}

extension ListViewController: UICollectionViewDataSourcePrefetching {

    func collectionView(_ collectionView: UICollectionView, prefetchItemsAt indexPaths: [IndexPath]) {
        for indexPath in indexPaths {
            interactor?.prefetchNextPage(index: indexPath.row)
        }
    }

}

extension ListViewController: ListDisplayLogic {

    func showTitle(_ title: String) {
        self.title = title
    }

    func show(_ viewModels: [List.ListCellViewModel]) {
        let items = dataSource.snapshot().itemIdentifiers + viewModels
        var snapshot = NSDiffableDataSourceSnapshot<ListSection, List.ListCellViewModel>()
        snapshot.appendSections([.repo])
        snapshot.appendItems(items, toSection: .repo)
        dataSource.apply(snapshot, animatingDifferences: true)
        collectionView.refreshControl?.endRefreshing()
    }

}
