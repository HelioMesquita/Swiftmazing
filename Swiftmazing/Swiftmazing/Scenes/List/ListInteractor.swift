//
//  ListInteractor.swift
//  Swiftmazing
//
//  Created by Hélio Mesquita on 14/12/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import UIKit

protocol ListBusinessLogic {
    func loadScreen()
    func reloadRepositories()
    func resetProvider()
    func prefetchNextPage(index: Int)
}

protocol ListDataStore {
    var listProvider: BaseRepositoriesProvider { get set }
    var listTitle: String { get set }
    var listRepositories: [Repository] { get set }
}

class ListInteractor: ListBusinessLogic, ListDataStore {

    let worker: RepositoriesWorker
    var presenter: ListPresentationLogic?

    // MARK: DATASTORE
    var listTitle: String = ""
    var listProvider: BaseRepositoriesProvider = BaseRepositoriesProvider(filter: .none)
    var listRepositories: [Repository] = []

    init(worker: RepositoriesWorker = RepositoriesWorker()) {
        self.worker = worker
    }

    func loadScreen() {
        presenter?.presentTitle(listTitle)
        presenter?.reloadMap(listRepositories)
    }

    func reloadRepositories() {
        resetProvider()
        worker.getRepositories(from: listProvider).done(handleReloadSuccess).cauterize()
    }

    private func handleReloadSuccess(_ repositories: Repositories) {
        presenter?.reloadMap(repositories.items)
    }

    func prefetchNextPage(index: Int) {
        let indexAdjusted = index + 1
        let totalItems = listProvider.currentPage * listProvider.itemsPerPage
        if indexAdjusted == totalItems {
            loadNextPage()
        }
    }

    private func loadNextPage() {
        listProvider.currentPage += 1
        worker.getRepositories(from: listProvider).done(handleNextSuccess).cauterize()
    }

    private func handleNextSuccess(_ repositories: Repositories) {
        presenter?.nextPageMap(repositories.items)
    }

    func resetProvider() {
        listProvider.currentPage = 1
    }

}
