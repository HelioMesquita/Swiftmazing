//
//  MainModels.swift
//  Swiftmazing
//
//  Created by Hélio Mesquita on 14/12/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Visual

enum Main {

    struct ViewModel {
        let news: [FeedCellViewModel]
        let topRepos: [FeedCellViewModel]
        let lastUpdated: [FeedCellViewModel]

        init(news: [FeedCellViewModel] = [], topRepos: [FeedCellViewModel] = [], lastUpdated: [FeedCellViewModel] = []) {
            self.news = news
            self.topRepos = topRepos
            self.lastUpdated = lastUpdated
        }

        init(news: MapNewsViewModel, topRepos: MapRepoViewModel, lastUpdated: MapRepoViewModel) {
            self.news = news.items
            self.topRepos = topRepos.items
            self.lastUpdated = lastUpdated.items
        }
    }

    struct FeedCellViewModel: FeedCollectionViewModelProtocol {
        var title: String
        var subtitle: String?
        var description: String
        var images: [URL]

        var section: FeedSection
        var repository: Repository?

        init(title: String, subtitle: String, description: String, section: FeedSection, images: [URL]) {
            self.title = title
            self.subtitle = subtitle
            self.description = description
            self.images = images
            self.section = section
        }

        init(repository: Repository, section: FeedSection) {
            self.title = repository.owner.name
            self.description = repository.description ?? ""
            self.images = [repository.owner.avatar]
            self.section = section
            self.repository = repository
        }
    }

    struct MapRepoViewModel {
        var items: [FeedCellViewModel]

        init(repositories: [Repository], section: FeedSection) {
            items = repositories.compactMap { FeedCellViewModel(repository: $0, section: section) }
        }
    }

    struct MapNewsViewModel {
        var items: [FeedCellViewModel]

        init(topRepos: [Repository], lastUpdated: [Repository]) {
            let topAvatars = topRepos.compactMap { $0.owner.avatar }
            let lastAvatars = lastUpdated.compactMap { $0.owner.avatar }
            items = [
                FeedCellViewModel(title: .bestRepositories,
                                  subtitle: .renownedRepositories,
                                  description: .bestTools,
                                  section: .topRepos,
                                  images: topAvatars),
                FeedCellViewModel(title: .updatedRepositories,
                                  subtitle: .latestUpdates,
                                  description: .mostUpdatedRepositories,
                                  section: .lastUpdated,
                                  images: lastAvatars)
            ]
        }
    }

}

fileprivate extension String {

    static let bestRepositories = NSLocalizedString("bestRepositories", comment: "")
    static let renownedRepositories = NSLocalizedString("renownedRepositories", comment: "")
    static let bestTools = NSLocalizedString("bestTools", comment: "")
    static let updatedRepositories = NSLocalizedString("updatedRepositories", comment: "")
    static let latestUpdates = NSLocalizedString("latestUpdates", comment: "")
    static let mostUpdatedRepositories = NSLocalizedString("mostUpdatedRepositories", comment: "")

}
